/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

using System;
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential)]
internal readonly struct Const<T>
{
    public readonly T value;
}

internal class FfiTests {

public const string RustLib = "ffi_tests";

public enum SomeReprCEnum {
    SomeVariant,
}

[DllImport(RustLib)] public unsafe extern static
void check_SomeReprCEnum (
    SomeReprCEnum _baz);

public struct foo {
   #pragma warning disable 0169
   private byte OPAQUE;
}

[DllImport(RustLib)] public unsafe extern static
foo * new_foo ();

[DllImport(RustLib)] public unsafe extern static
Int32 read_foo (
    Const<foo> * foo);

[DllImport(RustLib)] public unsafe extern static
void free_foo (
    foo * foo);

public enum Bar : byte {
    A,
}

[DllImport(RustLib)] public unsafe extern static
void check_bar (
    Bar _bar);

/** \brief
 *  Concatenate the two input strings into a new one.
 * 
 *  The returned string must be freed using `free_char_p`.
 */
[DllImport(RustLib)] public unsafe extern static
byte * concat (
    Const<byte> * fst,
    Const<byte> * snd);

/** \brief
 *  Frees a string created by `concat`.
 */
[DllImport(RustLib)] public unsafe extern static
void free_char_p (
    byte * _string);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe /* static */ delegate
    void
    void_void_ptr_char_const_ptr_fptr (
        void * _0,
        Const<byte> * _1);

[StructLayout(LayoutKind.Sequential, Size = 16)]
public unsafe struct RefDynFnMut1_void_char_const_ptr {
    public void * env_ptr;
    [MarshalAs(UnmanagedType.FunctionPtr)]
    public void_void_ptr_char_const_ptr_fptr call;
}

/** \brief
 *  Same as `concat`, but with a callback-based API to auto-free the created
 *  string.
 */
[DllImport(RustLib)] public unsafe extern static
void with_concat (
    Const<byte> * fst,
    Const<byte> * snd,
    RefDynFnMut1_void_char_const_ptr cb);

[StructLayout(LayoutKind.Sequential, Size = 16)]
public unsafe struct slice_ref_int32 {
    public Const<Int32> * ptr;
    public UIntPtr len;
}

/** \brief
 *  Returns a pointer to the maximum integer of the input slice, or `NULL` if
 *  it is empty.
 */
[DllImport(RustLib)] public unsafe extern static
Const<Int32> * max (
    slice_ref_int32 xs);


} /* FfiTests */
